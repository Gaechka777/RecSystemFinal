Входные данные модели BREC должны иметь следующий формат:

Обучающая, тестовая и валидационная выборки должны состоять из двух файлов расширения .npy: x.npy и y.npy
Файл x.npy содержит в себе тензорное представление признакового описания пользователей, в то время как y.npy хранит матрицу с информацией об их 
приобретенияях, которая будет использована в качестве целевых меток для обучения, валидации и теста модели.

Файл x.npy содержит трехмерный массив размерности N x M x L, где:

- N - количество объектов выборки, каждый из которых представляет из себя матрицу предыстории поведения и признакового описания пользователя
к некоторому моменту времени t
- M - количество наблюдений из прошлого, доступных для каждого пользователя (в эти наблюдения включается как демографические, личнсотные и любые другие
признаки описания пользователя во времени от момента t - M к моменту t, так и история его покупок)
- L - количество признаков, которыми описывается каждый пользователь

Файл y.npy содержит двумерный массив размерности N x K, где:
- N - то же, что и в файле x.npy
- K - можность витрины (то есть количество тех товаров, из которых мы можем выбирать предложения пользователю)

Описания флагов:
_______________________________________
'--train_dataset', type=str, default=None – путь к директории, в которой находится тренировочная выборка. В этой директории должны быть файлы x.npy и y.npy (Про формат данных – далее подробно)
'--val_dataset', type=str, default=None - путь к директории, в которой находится валидационная выборка. В этой директории должны быть файлы x.npy и y.npy
'--test_dataset', type=str, default=None - путь к директории, в которой находится тестовая выборка. В этой директории должны быть файлы x.npy и y.npy

_______________________________________
ВАЖНО: при установленных флагах –no_train False (default=False), –no_test False (default=False) и –no_val False (default=False) обязательно должны быть прописаны соответствующие директории
_______________________________________


Configuration of usage
_______________________________________
'--no_train', type=bool, default=False – при True обучение модели не производится
'--no_test', type=bool, default=False – при True тестирование модели не производится
'--no_val', type=bool, default=False – при True валидация  модели не производится
'--load_weights', type=bool, default=False – при True веса модели до обучения и тестирования будут загружены из соответствующей директории
'--save_weights_epoch', type=int, default=None – если значение равно некоторому числу N, то сохранение текущих весов модели будет производиться каждую N-ую эпоху
'--weights_path', type=str, default='./model' – директория в которую будут подгружены веса. Если load_weights=True, то имя файла с весами модели.

Info about data
_______________________________________
'-- n_items', type=int, default=22 – количество продуктов, которые можно рекомендовать пользователям
'--limit_rows', type=int, default=1_000_000 – ограничение по размеру датасета

Model configuration
_______________________________________
'--hidden_size', type=int, default=2048 – размерность скрытого векторного представления внутри модели
'--n_layers', type=int, default=10 – число слоев энкодера от трансформера внутри модели
'--heads', type=int, default=7 – число голов трансформера
'--d_model', type=int, default=42 – число признаков, подающихся на входе для каждого пользователя
'--device', type=str, default='cuda' if torch.cuda.is_available() else 'cpu' – устройство, на котором будут выполняться вычисления
'--predict_only', type=bool, default=False - если True, то выполняется только предсказание на test_set, результат сохраняется в файл
'--predictions_save_file', type=str, default='./prediction.npy' - файл, куда будут сохранены предсказания в виде массива numpy
'--prediction_type', type=str, default='logits' - один из двух вариантов "logits" или "recommendations". Регулирует тип сохраняемых предсказаний

Training params
_______________________________________
'--lr', type=float, default=1e-3 – learning rate
'--dropout', type=float, default=0.1 – дропаут
'--batch_size', type=int, default=64 – размер батча
'--warmup_type', type=str, default='linear' – тип функции, по которой будет изменяться learning rate в течение первых эпох. Доступные опции: “linear”, “exponential”, “radam”
'--warmup_epochs', type=int, default=10 – количество эпох, в течение которых применяется learning rate warmup
'--val_every_n', type=int, default=1 – если равно некоторому числу N, то валидация модели будет проводиться каждые N эпох
'--log_dir', type=str, default=None – директория, в которую буду сохранены логи обучения модели
'--epochs', type=int, default=1 – количество эпох обучения


Пример запуска:

python brec.py --train_dataset ~/data/ --val_dataset ~/data/ --no_test True --weights_path ~/Models/BREC_Ready --device cuda --dropout 0.0 --val_every_n 3 --log_dir ~/Logs --epochs 10

Информация по данным:

Данные для тестирования модели можно найти по ссылкам:

https://drive.google.com/file/d/1tR2DaBxrokUpXvWkv2dzqZBwf7aEAIv6/view?usp=sharing
https://drive.google.com/file/d/1IZZIzsm9k48QytylQTLf5cwekrwHolwk/view?usp=sharing

Для тестирования модели нужно загрузить указанные файлы в папку data локально.


